---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ingress
spec:
  replicas: 2
  template:
    metadata:
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
        ad.datadoghq.com/nginx-ingress.check_names: '["nginx","nginx_ingress_controller"]'
        ad.datadoghq.com/nginx-ingress.init_configs: '[{},{}]'
        ad.datadoghq.com/nginx-ingress.instances: '[{"nginx_status_url": "http://%%host%%:18080/nginx_status"},{"prometheus_url": "http://%%host%%:10254/metrics"}]'
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: ingress
      containers:
        - name: nginx-ingress
          image: k8s.gcr.io/ingress-nginx/controller:v0.46.0@sha256:52f0058bed0a17ab0fb35628ba97e8d52b5d32299fbc03cc0f6c7b9ff036b61a
          args:
            - /nginx-ingress-controller
            - --configmap=$(POD_NAMESPACE)/nginx-configuration-$(LABEL_APP_NAME)
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services-$(LABEL_APP_NAME)
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services-$(LABEL_APP_NAME)
            - --publish-service=$(POD_NAMESPACE)/ingress-$(LABEL_APP_NAME)
            - --annotations-prefix=nginx.ingress.kubernetes.io
            - --ingress-class=$(LABEL_APP_NAME)
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: LABEL_APP_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['app.kubernetes.io/name']
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
---
apiVersion: v1
kind: LimitRange
metadata:
  name: ingress
spec:
  limits:
    - min:
        memory: 90Mi
        cpu: 100m
      type: Container

---
kind: Service
apiVersion: v1
metadata:
  name: ingress
  annotations:
    # by default the type is elb (classic load balancer).
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
spec:
  # this setting is to make sure the source IP address is preserved.
  externalTrafficPolicy: Local
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
    - name: metrics
      port: 10254
